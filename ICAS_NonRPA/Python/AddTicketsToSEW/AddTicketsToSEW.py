'''
Copyright 2020 Infosys Ltd.
Use of this source code is governed by Apache 2.0 license that can be found in the LICENSE file or at 
https://opensource.org/licenses/Apache-2.0 .
'''
from abstract_bot import Bot
import requests
import json
import urllib.request # python 3.6

class AddTicketsToSEW(Bot):

    def bot_init(self):
        pass
                                
    
    def _CALL(self,accesToken, url, incJsonTxt, method_type='PUT', media_type=""):
        print("_CALL : "+str(method_type)+" : "+str(url))
#        print(incJsonTxt)
        
        try:
            if incJsonTxt!="":
                incJson =  json.loads(incJsonTxt)
                print(incJson)
            
            headers = {}    
            headers['Content-Type'] = 'application/json'
            headers['Authorization'] = accesToken #self.token
            if media_type != "":
                headers['X-Nia-Media-Type'] =  media_type
            
            print(headers)
          
            request = urllib.request.Request(url, data=incJsonTxt.encode('utf8'), headers=headers, method=method_type )
            resp = urllib.request.urlopen(request)
#            print(resp)
            
            return resp
            
        except Exception as e:
           print(e)

    
            
    def execute(self, executeContext):

        try:
            output = {'SewIdDetails': []}
            records = executeContext['incidentDetails']
            api = executeContext['api']
            accessToken = executeContext['accessToken']
            jsonrecord = json.loads(records)

            for record in jsonrecord:
               
                incidentId=str(record['incidentId'])
                reportedBy=str(record['openedBy'])
                reportedAt=str(record['openedAt'])
                priority=str(record['priority'])
                descriptionRT=str(record['shortDesc'])
                
                incJsonTxt = {
                    "incident_id": incidentId, 
                    "description": descriptionRT,
                    "priority": priority,
                    "reported_by": reportedBy, 
                    "reported_at": reportedAt
                }
#         http://vimphyz03-01:65432/incident-enrichment/automation/incidents
#                url = api
#                con = self._CALL(accessToken,url,json.dumps(incJsonTxt), 'PUT')
#                strResp = con.read() #.decode("utf-8") 
#                incident_sid = -1
#                if len(strResp.strip()) == 0 :
#                    print("No response")
#                else:
#                    jsonResp = json.loads(strResp)
#                    incident_sid = jsonResp['incidents'][0]['id']
                incident_sid = "9999"
#                    print("incident_sid="+str(incident_sid))
                incidentInfo = {"incident_id":incidentId, "sew_id": incident_sid,"reportedBy":reportedBy,"reportedAt":reportedAt,"priority":priority,"descriptionRT":descriptionRT} 
#                incidentInfo = {str(incidentId):incident_sid} # adding above hardcoded value
                output['SewIdDetails'].append((incidentInfo))
                finalOutput = json.dumps(output)
                
            return {'SewIncDetails':finalOutput}
            
        except Exception as e:
            
            return {'Exception':str(e)}

if __name__ == '__main__':
    context = {}
    bot_obj = AddTicketsToSEW()
    context = {'incidentDetails' :'','api':'','accessToken':''}   # accessToekn is generated by getAccessTojen Microbot
#    context = {'incidentDetails' :'','api':' http://vimphyz03-01:65432/incident-enrichment/automation/incidents','accessToken':'Bearer AT-19-oe-rI2IUzQnx-1QgQsaOLZ5YPiQUm-MY'}
    bot_obj.bot_init()
    output = bot_obj.execute(context)
    print(output)
